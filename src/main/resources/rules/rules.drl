package fiuba.fallas
import fiuba.fallas.model.Question
import fiuba.fallas.model.Answer
import fiuba.fallas.model.Solution
import java.util.Scanner

rule Init when
then
    insert( new Question( "1", "¿El paciente es un adulto? (y/n)" ) );
end

rule End when
    s : Solution()
then
    System.out.println("Resultado:\n" + s.getText() );
end

/* Regla4 */
rule AdultoDonde when
    q : Question( id == "1" )
    Answer( question == q, answer == "y" )
then
    insertLogical( new Question( "2", "¿Se encuentra en un Centro de Salud o Testeo Voluntario? (y/n)" ) );
end


rule AdultoTestRapido when
    q : Question( id == "2" )
    Answer( question == q, answer == "y" )
then
    insertLogical( new Question( "3", "Se debe realizar un test rapido. Ingrese el resultado: (+/-)" ) );
end

/* Regla 6 */
rule AdultoTestEIACuartaGen when
    q : Question( id == "3" )
    Answer( question == q, answer == "+" )
then
    insertLogical( new Question( "4", "Se debe realizar un test EIA de cuarta generacion. Ingrese el resultado: (+/-)" ) );
end

/* Regla 8 */
rule AdultoTestEIACuartaGenNegativo when
    q : Question( id == "4" )
    Answer( question == q, answer == "-" )
then
    insertLogical( new Solution( "Negativo para anticuerpos HIV-1/2" ) );
end

/* Regla 9 */
rule AdultoTestPersonaDeRiesgoHIV2 when
    q : Question( id == "4" )
    Answer( question == q, answer == "+" )
then
    insertLogical( new Question( "5", "¿El paciente es persona de riesgo HIV-2?: (y/n)" ) );
end

/* Regla 9 */
rule AdultoTestWBoLIAParaHIV2 when
    q : Question( id == "5" )
    Answer( question == q, answer == "y" )
then
    insertLogical( new Question( "6", "Se necesita realizar un estudio Western Blot o LIA para HIV-2. Ingrese el resultado: (+/-)" ) );
end

/* Regla 11 */
rule AdultoTestWBoLIAParaHIV2Positivo when
    q : Question( id == "6" )
    Answer( question == q, answer == "+" )
then
    insertLogical( new Solution( "Se necesitan estudios suplementarios HIV-2 en laboratorio de referencia" ) );
end




rule AskQuestion when
    q : Question( )
    not Answer( question == q )
then
    System.out.println( q.getId() + " : " + q.getText() );
    System.out.print("> ");
    Scanner keyboard = new Scanner(System.in);
    insert( keyboard.nextLine() );
end

rule ResetAnswer when
    s : String( this matches "\\d+" )
    q : Question( id == s )
    a : Answer( question == q)
then
    System.out.println( "Removing Answer : " + a );
    delete( a );
    delete( s );
end

rule QuestionDoesNotExist when
    s : String( this matches "\\d+" )
    not Question( id == s )
then
    System.out.println( "Question does not exist, id " + s );
end

rule ProcessAnswer when
    s : String()
    q : Question()
    not Answer( question == q )
then
    insert( new Answer( q, s ) );
    delete( s );
end

rule InvalidInput when
    s : String( )
then
    System.out.println( "Invalid input : " + s );
    delete( s );
end